Compilation warnings/errors on DMiner/MasterMining.sol:
Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> DMiner/SafeERC20.sol


Compilation warnings/errors on DMiner/SafeERC20.sol:
Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> DMiner/SafeERC20.sol


INFO:Detectors:[92m
Pragma version^0.6.0 (DMiner/IERC20.sol#3) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Pragma version^0.6.0 (DMiner/IFilDMinerStorage.sol#2) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Variable IFilDMinerStorage._ifilNfts (DMiner/IFilDMinerStorage.sol#41) is not in mixedCase
Variable IFilDMinerStorage._prodNfts (DMiner/IFilDMinerStorage.sol#42) is not in mixedCase
Variable IFilDMinerStorage._beftPools (DMiner/IFilDMinerStorage.sol#43) is not in mixedCase
Variable IFilDMinerStorage._users (DMiner/IFilDMinerStorage.sol#44) is not in mixedCase
Variable IFilDMinerStorage._uids (DMiner/IFilDMinerStorage.sol#45) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformity-to-solidity-naming-conventions[0m
INFO:Detectors:[93m
IFilDMiner.depositBenefits(uint256,uint256,uint256) (DMiner/IFilDMiner.sol#61-69) performs a multiplication on the result of a division:
	-_dayTime = block.timestamp.div(DAYTIME).mul(DAYTIME) (DMiner/IFilDMiner.sol#64)
IFilDMiner.createNFT(bytes32,uint256,uint256,uint256) (DMiner/IFilDMiner.sol#71-113) performs a multiplication on the result of a division:
	-curDayTime = block.timestamp.div(DAYTIME).mul(DAYTIME) (DMiner/IFilDMiner.sol#103)
IFilDMiner.recvAirdrop() (DMiner/IFilDMiner.sol#124-140) performs a multiplication on the result of a division:
	-curDayTime = block.timestamp.div(DAYTIME).mul(DAYTIME) (DMiner/IFilDMiner.sol#128)
IFilDMiner.getNFTPeriodBenefits(uint256,uint256,uint256) (DMiner/IFilDMiner.sol#238-253) performs a multiplication on the result of a division:
	-_startTime = _startTime.div(DAYTIME).mul(DAYTIME) (DMiner/IFilDMiner.sol#239)
IFilDMiner.getNFTPeriodBenefits(uint256,uint256,uint256) (DMiner/IFilDMiner.sol#238-253) performs a multiplication on the result of a division:
	-_endTime = _endTime.div(DAYTIME).mul(DAYTIME) (DMiner/IFilDMiner.sol#240)
IFilDMiner.getNFTDayBenefits(uint256,uint256) (DMiner/IFilDMiner.sol#255-258) performs a multiplication on the result of a division:
	-_dayTime = _dayTime.div(DAYTIME).mul(DAYTIME) (DMiner/IFilDMiner.sol#256)
IFilDMiner.getDayBenefitsByTokens(uint256[],uint256) (DMiner/IFilDMiner.sol#260-268) performs a multiplication on the result of a division:
	-_dayTime = _dayTime.div(DAYTIME).mul(DAYTIME) (DMiner/IFilDMiner.sol#261)
IFilDMiner._calcNFTBenefits(uint256) (DMiner/IFilDMiner.sol#292-316) performs a multiplication on the result of a division:
	-curDayTime = block.timestamp.div(DAYTIME).mul(DAYTIME) (DMiner/IFilDMiner.sol#295)
IFilDMiner._calcNFTBenefits(uint256) (DMiner/IFilDMiner.sol#292-316) performs a multiplication on the result of a division:
	-diffDay = curDayTime.sub(i).div(DAYTIME) (DMiner/IFilDMiner.sol#307)
	-_totalBenefits += benefitPool.linearMineAmount.mul(diffDay).mul(ifilNFT.power).div(linearReleaseDay).div(benefitPool.effectPower) (DMiner/IFilDMiner.sol#311)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[92m
Vistor.setVistor(address,bool).allow (DMiner/Vistor.sol#17) shadows:
	- Vistor.allow(address) (DMiner/Vistor.sol#22-24) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
IFilDMiner.withdrawBenefits(uint256[]) (DMiner/IFilDMiner.sol#161-175) has external calls inside a loop: require(bool,string)(cloudMiner.ownerOf(_tokens[i]) == msg.sender,not owner withdraw) (DMiner/IFilDMiner.sol#164)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop[0m
INFO:Detectors:[92m
Reentrancy in IFilDMiner.createNFT(bytes32,uint256,uint256,uint256) (DMiner/IFilDMiner.sol#71-113):
	External calls:
	- _safeTransferFrom(usdt,msg.sender,fundAddr,needPayFee) (DMiner/IFilDMiner.sol#94)
		- returnData = _token.functionCall(abi.encodeWithSelector(ERC20_TRANSFERFROM_SELECTOR,_from,_to,_amount),ERC20: transferFrom call failed) (DMiner/IFilDMiner.sol#351-356)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- _safeTransferFrom(usdt,msg.sender,inviter,inviteRewards) (DMiner/IFilDMiner.sol#95)
		- returnData = _token.functionCall(abi.encodeWithSelector(ERC20_TRANSFERFROM_SELECTOR,_from,_to,_amount),ERC20: transferFrom call failed) (DMiner/IFilDMiner.sol#351-356)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- _safeTransferFrom(usdt,msg.sender,address(dmexVendor),sendAmount) (DMiner/IFilDMiner.sol#98)
		- returnData = _token.functionCall(abi.encodeWithSelector(ERC20_TRANSFERFROM_SELECTOR,_from,_to,_amount),ERC20: transferFrom call failed) (DMiner/IFilDMiner.sol#351-356)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- dmexVendor.settlementAndTimeLock(_prodid,msg.sender,_recvPower,sendAmount) (DMiner/IFilDMiner.sol#99)
	- tokenid = cloudMiner.mint(msg.sender) (DMiner/IFilDMiner.sol#104)
	External calls sending eth:
	- _safeTransferFrom(usdt,msg.sender,fundAddr,needPayFee) (DMiner/IFilDMiner.sol#94)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- _safeTransferFrom(usdt,msg.sender,inviter,inviteRewards) (DMiner/IFilDMiner.sol#95)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- _safeTransferFrom(usdt,msg.sender,address(dmexVendor),sendAmount) (DMiner/IFilDMiner.sol#98)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	State variables written after the call(s):
	- _ifilNfts[tokenid].prodid = _prodid (DMiner/IFilDMiner.sol#105)
	- _ifilNfts[tokenid].power = _recvPower (DMiner/IFilDMiner.sol#106)
	- _ifilNfts[tokenid].createTime = block.timestamp (DMiner/IFilDMiner.sol#107)
	- _ifilNfts[tokenid].activeTime = curDayTime.add(prod.activePeriod.mul(DAYTIME)) (DMiner/IFilDMiner.sol#108)
	- _ifilNfts[tokenid].expireTime = _ifilNfts[tokenid].activeTime.add(prod.effectPeriod.mul(DAYTIME)) (DMiner/IFilDMiner.sol#109)
	- _prodNfts[_prodid].push(tokenid) (DMiner/IFilDMiner.sol#110)
Reentrancy in IFilDMiner.depositBenefits(uint256,uint256,uint256) (DMiner/IFilDMiner.sol#61-69):
	External calls:
	- _safeTransferFrom(hfilToken,msg.sender,address(this),_mineBenefits) (DMiner/IFilDMiner.sol#62)
		- returnData = _token.functionCall(abi.encodeWithSelector(ERC20_TRANSFERFROM_SELECTOR,_from,_to,_amount),ERC20: transferFrom call failed) (DMiner/IFilDMiner.sol#351-356)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	External calls sending eth:
	- _safeTransferFrom(hfilToken,msg.sender,address(this),_mineBenefits) (DMiner/IFilDMiner.sol#62)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	State variables written after the call(s):
	- _beftPools[_prodid][_dayTime].fixedMineAmount += _mineBenefits.mul(fixedRate).div(100) (DMiner/IFilDMiner.sol#65)
	- _beftPools[_prodid][_dayTime].linearMineAmount += _mineBenefits.mul(linearRate).div(100) (DMiner/IFilDMiner.sol#66)
	- _beftPools[_prodid][_dayTime].effectPower = _effectPower (DMiner/IFilDMiner.sol#67)
Reentrancy in IFilDMiner.recvAirdrop() (DMiner/IFilDMiner.sol#124-140):
	External calls:
	- (_prodid,_power) = IDMexAirdrop(airdrop).recvAirdrop(msg.sender) (DMiner/IFilDMiner.sol#125)
	- tokenid = cloudMiner.mint(msg.sender) (DMiner/IFilDMiner.sol#131)
	State variables written after the call(s):
	- _ifilNfts[tokenid].prodid = _prodid (DMiner/IFilDMiner.sol#132)
	- _ifilNfts[tokenid].power = _power (DMiner/IFilDMiner.sol#133)
	- _ifilNfts[tokenid].createTime = block.timestamp (DMiner/IFilDMiner.sol#134)
	- _ifilNfts[tokenid].activeTime = curDayTime.add(prod.activePeriod.mul(DAYTIME)) (DMiner/IFilDMiner.sol#135)
	- _ifilNfts[tokenid].expireTime = _ifilNfts[tokenid].activeTime.add(prod.effectPeriod.mul(DAYTIME)) (DMiner/IFilDMiner.sol#136)
	- _prodNfts[_prodid].push(tokenid) (DMiner/IFilDMiner.sol#137)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Reentrancy in IFilDMiner.createNFT(bytes32,uint256,uint256,uint256) (DMiner/IFilDMiner.sol#71-113):
	External calls:
	- _safeTransferFrom(usdt,msg.sender,fundAddr,needPayFee) (DMiner/IFilDMiner.sol#94)
		- returnData = _token.functionCall(abi.encodeWithSelector(ERC20_TRANSFERFROM_SELECTOR,_from,_to,_amount),ERC20: transferFrom call failed) (DMiner/IFilDMiner.sol#351-356)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- _safeTransferFrom(usdt,msg.sender,inviter,inviteRewards) (DMiner/IFilDMiner.sol#95)
		- returnData = _token.functionCall(abi.encodeWithSelector(ERC20_TRANSFERFROM_SELECTOR,_from,_to,_amount),ERC20: transferFrom call failed) (DMiner/IFilDMiner.sol#351-356)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- _safeTransferFrom(usdt,msg.sender,address(dmexVendor),sendAmount) (DMiner/IFilDMiner.sol#98)
		- returnData = _token.functionCall(abi.encodeWithSelector(ERC20_TRANSFERFROM_SELECTOR,_from,_to,_amount),ERC20: transferFrom call failed) (DMiner/IFilDMiner.sol#351-356)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- dmexVendor.settlementAndTimeLock(_prodid,msg.sender,_recvPower,sendAmount) (DMiner/IFilDMiner.sol#99)
	External calls sending eth:
	- _safeTransferFrom(usdt,msg.sender,fundAddr,needPayFee) (DMiner/IFilDMiner.sol#94)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- _safeTransferFrom(usdt,msg.sender,inviter,inviteRewards) (DMiner/IFilDMiner.sol#95)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- _safeTransferFrom(usdt,msg.sender,address(dmexVendor),sendAmount) (DMiner/IFilDMiner.sol#98)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	Event emitted after the call(s):
	- InviteReward(msg.sender,inviter,inviteRewards) (DMiner/IFilDMiner.sol#101)
Reentrancy in IFilDMiner.createNFT(bytes32,uint256,uint256,uint256) (DMiner/IFilDMiner.sol#71-113):
	External calls:
	- _safeTransferFrom(usdt,msg.sender,fundAddr,needPayFee) (DMiner/IFilDMiner.sol#94)
		- returnData = _token.functionCall(abi.encodeWithSelector(ERC20_TRANSFERFROM_SELECTOR,_from,_to,_amount),ERC20: transferFrom call failed) (DMiner/IFilDMiner.sol#351-356)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- _safeTransferFrom(usdt,msg.sender,inviter,inviteRewards) (DMiner/IFilDMiner.sol#95)
		- returnData = _token.functionCall(abi.encodeWithSelector(ERC20_TRANSFERFROM_SELECTOR,_from,_to,_amount),ERC20: transferFrom call failed) (DMiner/IFilDMiner.sol#351-356)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- _safeTransferFrom(usdt,msg.sender,address(dmexVendor),sendAmount) (DMiner/IFilDMiner.sol#98)
		- returnData = _token.functionCall(abi.encodeWithSelector(ERC20_TRANSFERFROM_SELECTOR,_from,_to,_amount),ERC20: transferFrom call failed) (DMiner/IFilDMiner.sol#351-356)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- dmexVendor.settlementAndTimeLock(_prodid,msg.sender,_recvPower,sendAmount) (DMiner/IFilDMiner.sol#99)
	- tokenid = cloudMiner.mint(msg.sender) (DMiner/IFilDMiner.sol#104)
	External calls sending eth:
	- _safeTransferFrom(usdt,msg.sender,fundAddr,needPayFee) (DMiner/IFilDMiner.sol#94)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- _safeTransferFrom(usdt,msg.sender,inviter,inviteRewards) (DMiner/IFilDMiner.sol#95)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	- _safeTransferFrom(usdt,msg.sender,address(dmexVendor),sendAmount) (DMiner/IFilDMiner.sol#98)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	Event emitted after the call(s):
	- BuyIFilNFT(msg.sender,tokenid,_prodid,needPayAmount,_recvPower) (DMiner/IFilDMiner.sol#112)
Reentrancy in IFilDMiner.depositBenefits(uint256,uint256,uint256) (DMiner/IFilDMiner.sol#61-69):
	External calls:
	- _safeTransferFrom(hfilToken,msg.sender,address(this),_mineBenefits) (DMiner/IFilDMiner.sol#62)
		- returnData = _token.functionCall(abi.encodeWithSelector(ERC20_TRANSFERFROM_SELECTOR,_from,_to,_amount),ERC20: transferFrom call failed) (DMiner/IFilDMiner.sol#351-356)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	External calls sending eth:
	- _safeTransferFrom(hfilToken,msg.sender,address(this),_mineBenefits) (DMiner/IFilDMiner.sol#62)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	Event emitted after the call(s):
	- DepositBenefit(_prodid,_dayTime,_mineBenefits) (DMiner/IFilDMiner.sol#68)
Reentrancy in IFilDMiner.recvAirdrop() (DMiner/IFilDMiner.sol#124-140):
	External calls:
	- (_prodid,_power) = IDMexAirdrop(airdrop).recvAirdrop(msg.sender) (DMiner/IFilDMiner.sol#125)
	- tokenid = cloudMiner.mint(msg.sender) (DMiner/IFilDMiner.sol#131)
	Event emitted after the call(s):
	- RecvAirdrop(msg.sender,tokenid,_prodid,_power) (DMiner/IFilDMiner.sol#139)
Reentrancy in IFilDMiner.withdrawBenefits() (DMiner/IFilDMiner.sol#142-159):
	External calls:
	- _safeTransfer(hfilToken,msg.sender,totalBenefits) (DMiner/IFilDMiner.sol#157)
		- returnData = _token.functionCall(abi.encodeWithSelector(ERC20_TRANSFER_SELECTOR,_to,_amount),ERC20: transfer call failed) (DMiner/IFilDMiner.sol#339-343)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	External calls sending eth:
	- _safeTransfer(hfilToken,msg.sender,totalBenefits) (DMiner/IFilDMiner.sol#157)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	Event emitted after the call(s):
	- Withdraw(msg.sender,totalBenefits) (DMiner/IFilDMiner.sol#158)
Reentrancy in IFilDMiner.withdrawBenefits(uint256[]) (DMiner/IFilDMiner.sol#161-175):
	External calls:
	- _safeTransfer(hfilToken,msg.sender,totalBenefits) (DMiner/IFilDMiner.sol#173)
		- returnData = _token.functionCall(abi.encodeWithSelector(ERC20_TRANSFER_SELECTOR,_to,_amount),ERC20: transfer call failed) (DMiner/IFilDMiner.sol#339-343)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	External calls sending eth:
	- _safeTransfer(hfilToken,msg.sender,totalBenefits) (DMiner/IFilDMiner.sol#173)
		- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
	Event emitted after the call(s):
	- Withdraw(msg.sender,totalBenefits) (DMiner/IFilDMiner.sol#174)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
IFilDMiner.createNFT(bytes32,uint256,uint256,uint256) (DMiner/IFilDMiner.sol#71-113) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= prod.startTime,It's not time to buy yet) (DMiner/IFilDMiner.sol#75)
IFilDMiner.getUserInfo(address) (DMiner/IFilDMiner.sol#188-218) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp < _ifilNfts[_tokens[i]].expireTime (DMiner/IFilDMiner.sol#201)
IFilDMiner.getEffectPower(uint256) (DMiner/IFilDMiner.sol#270-280) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= ifilNFT.activeTime && block.timestamp < ifilNFT.expireTime (DMiner/IFilDMiner.sol#275)
IFilDMiner._calcNFTBenefits(uint256) (DMiner/IFilDMiner.sol#292-316) uses timestamp for comparisons
	Dangerous comparisons:
	- endDayTime >= ifilNFT.expireTime (DMiner/IFilDMiner.sol#297)
	- i <= endDayTime (DMiner/IFilDMiner.sol#302)
	- diffDay > 0 && diffDay > linearReleaseDay (DMiner/IFilDMiner.sol#308)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Address.isContract(address) (DMiner/Address.sol#26-35) uses assembly
	- INLINE ASM (DMiner/Address.sol#33)
Address._verifyCallResult(bool,bytes,string) (DMiner/Address.sol#171-188) uses assembly
	- INLINE ASM (DMiner/Address.sol#180-183)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
IFilDMiner.initialize() (DMiner/IFilDMiner.sol#48-54) compares to a boolean constant:
	-require(bool,string)(_initialize == false,already initialized) (DMiner/IFilDMiner.sol#49)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality[0m
INFO:Detectors:[92m
Different versions of Solidity is used in :
	- Version used: ['^0.6.0', '^0.6.2']
	- ^0.6.2 (DMiner/Address.sol#3)
	- ^0.6.0 (DMiner/Governance.sol#2)
	- ^0.6.2 (DMiner/ICloudMiner.sol#3)
	- ^0.6.0 (DMiner/IDMexAirdrop.sol#2)
	- ^0.6.0 (DMiner/IDMexVendor.sol#2)
	- ABIEncoderV2 (DMiner/IDMexVendor.sol#3)
	- ^0.6.0 (DMiner/IDMexVendorStorage.sol#2)
	- ^0.6.2 (DMiner/IERC721.sol#3)
	- ^0.6.0 (DMiner/IFilDMiner.sol#2)
	- ABIEncoderV2 (DMiner/IFilDMiner.sol#3)
	- ^0.6.0 (DMiner/IFilDMinerStorage.sol#2)
	- ^0.6.0 (DMiner/SafeMath.sol#3)
	- ^0.6.0 (DMiner/Vistor.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used[0m
INFO:Detectors:[92m
Pragma version^0.6.2 (DMiner/Address.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/Governance.sol#2) allows old versions
Pragma version^0.6.2 (DMiner/ICloudMiner.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/IDMexAirdrop.sol#2) allows old versions
Pragma version^0.6.0 (DMiner/IDMexVendor.sol#2) allows old versions
Pragma version^0.6.0 (DMiner/IDMexVendorStorage.sol#2) allows old versions
Pragma version^0.6.2 (DMiner/IERC721.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/IFilDMiner.sol#2) allows old versions
Pragma version^0.6.0 (DMiner/IFilDMinerStorage.sol#2) allows old versions
Pragma version^0.6.0 (DMiner/SafeMath.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/Vistor.sol#2) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in Address.sendValue(address,uint256) (DMiner/Address.sol#53-59):
	- (success) = recipient.call{value: amount}() (DMiner/Address.sol#57)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (DMiner/Address.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
Low level call in Address.functionStaticCall(address,bytes,string) (DMiner/Address.sol#139-145):
	- (success,returndata) = target.staticcall(data) (DMiner/Address.sol#143)
Low level call in Address.functionDelegateCall(address,bytes,string) (DMiner/Address.sol#163-169):
	- (success,returndata) = target.delegatecall(data) (DMiner/Address.sol#167)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Variable Governance._governance (DMiner/Governance.sol#6) is not in mixedCase
Parameter IFilDMiner.setAirdrop(address)._addr (DMiner/IFilDMiner.sol#56) is not in mixedCase
Parameter IFilDMiner.depositBenefits(uint256,uint256,uint256)._prodid (DMiner/IFilDMiner.sol#61) is not in mixedCase
Parameter IFilDMiner.depositBenefits(uint256,uint256,uint256)._effectPower (DMiner/IFilDMiner.sol#61) is not in mixedCase
Parameter IFilDMiner.depositBenefits(uint256,uint256,uint256)._mineBenefits (DMiner/IFilDMiner.sol#61) is not in mixedCase
Parameter IFilDMiner.createNFT(bytes32,uint256,uint256,uint256)._inviterid (DMiner/IFilDMiner.sol#71) is not in mixedCase
Parameter IFilDMiner.createNFT(bytes32,uint256,uint256,uint256)._prodid (DMiner/IFilDMiner.sol#71) is not in mixedCase
Parameter IFilDMiner.createNFT(bytes32,uint256,uint256,uint256)._buyAmount (DMiner/IFilDMiner.sol#71) is not in mixedCase
Parameter IFilDMiner.createNFT(bytes32,uint256,uint256,uint256)._payment (DMiner/IFilDMiner.sol#71) is not in mixedCase
Parameter IFilDMiner.withdrawBenefits(uint256[])._tokens (DMiner/IFilDMiner.sol#161) is not in mixedCase
Parameter IFilDMiner.getBenefitPool(uint256,uint256)._prodid (DMiner/IFilDMiner.sol#179) is not in mixedCase
Parameter IFilDMiner.getBenefitPool(uint256,uint256)._poolid (DMiner/IFilDMiner.sol#179) is not in mixedCase
Parameter IFilDMiner.getNFTPeriodBenefits(uint256,uint256,uint256)._tokenid (DMiner/IFilDMiner.sol#238) is not in mixedCase
Parameter IFilDMiner.getNFTPeriodBenefits(uint256,uint256,uint256)._startTime (DMiner/IFilDMiner.sol#238) is not in mixedCase
Parameter IFilDMiner.getNFTPeriodBenefits(uint256,uint256,uint256)._endTime (DMiner/IFilDMiner.sol#238) is not in mixedCase
Parameter IFilDMiner.getNFTDayBenefits(uint256,uint256)._tokenid (DMiner/IFilDMiner.sol#255) is not in mixedCase
Parameter IFilDMiner.getNFTDayBenefits(uint256,uint256)._dayTime (DMiner/IFilDMiner.sol#255) is not in mixedCase
Parameter IFilDMiner.getDayBenefitsByTokens(uint256[],uint256)._tokens (DMiner/IFilDMiner.sol#260) is not in mixedCase
Parameter IFilDMiner.getDayBenefitsByTokens(uint256[],uint256)._dayTime (DMiner/IFilDMiner.sol#260) is not in mixedCase
Parameter IFilDMiner.getEffectPower(uint256)._prodid (DMiner/IFilDMiner.sol#270) is not in mixedCase
Constant IFilDMiner.dmexVendor (DMiner/IFilDMiner.sol#27) is not in UPPER_CASE_WITH_UNDERSCORES
Constant IFilDMiner.cloudMiner (DMiner/IFilDMiner.sol#28) is not in UPPER_CASE_WITH_UNDERSCORES
Constant IFilDMiner.hfilToken (DMiner/IFilDMiner.sol#29) is not in UPPER_CASE_WITH_UNDERSCORES
Constant IFilDMiner.usdt (DMiner/IFilDMiner.sol#33) is not in UPPER_CASE_WITH_UNDERSCORES
Constant IFilDMiner.fundAddr (DMiner/IFilDMiner.sol#35) is not in UPPER_CASE_WITH_UNDERSCORES
Constant IFilDMiner.fixedRate (DMiner/IFilDMiner.sol#41) is not in UPPER_CASE_WITH_UNDERSCORES
Constant IFilDMiner.linearRate (DMiner/IFilDMiner.sol#42) is not in UPPER_CASE_WITH_UNDERSCORES
Constant IFilDMiner.linearReleaseDay (DMiner/IFilDMiner.sol#43) is not in UPPER_CASE_WITH_UNDERSCORES
Variable IFilDMiner._initialize (DMiner/IFilDMiner.sol#46) is not in mixedCase
Variable IFilDMinerStorage._ifilNfts (DMiner/IFilDMinerStorage.sol#41) is not in mixedCase
Variable IFilDMinerStorage._prodNfts (DMiner/IFilDMinerStorage.sol#42) is not in mixedCase
Variable IFilDMinerStorage._beftPools (DMiner/IFilDMinerStorage.sol#43) is not in mixedCase
Variable IFilDMinerStorage._users (DMiner/IFilDMinerStorage.sol#44) is not in mixedCase
Variable IFilDMinerStorage._uids (DMiner/IFilDMinerStorage.sol#45) is not in mixedCase
Parameter Vistor.setVistor(address,bool)._addr (DMiner/Vistor.sol#17) is not in mixedCase
Parameter Vistor.allow(address)._addr (DMiner/Vistor.sol#22) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformity-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
IFilDMiner.slitherConstructorConstantVariables() (DMiner/IFilDMiner.sol#13-362) uses literals with too many digits:
	- OFFICAL_UID = 0x444d455800000000000000000000000000000000000000000000000000000000 (DMiner/IFilDMiner.sol#37)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
INFO:Detectors:[92m
setGovernance(address) should be declared external:
	- Governance.setGovernance(address) (DMiner/Governance.sol#19-24)
initialize() should be declared external:
	- IFilDMiner.initialize() (DMiner/IFilDMiner.sol#48-54)
setAirdrop(address) should be declared external:
	- IFilDMiner.setAirdrop(address) (DMiner/IFilDMiner.sol#56-59)
depositBenefits(uint256,uint256,uint256) should be declared external:
	- IFilDMiner.depositBenefits(uint256,uint256,uint256) (DMiner/IFilDMiner.sol#61-69)
createNFT(bytes32,uint256,uint256,uint256) should be declared external:
	- IFilDMiner.createNFT(bytes32,uint256,uint256,uint256) (DMiner/IFilDMiner.sol#71-113)
userRegister(bytes32) should be declared external:
	- IFilDMiner.userRegister(bytes32) (DMiner/IFilDMiner.sol#115-122)
recvAirdrop() should be declared external:
	- IFilDMiner.recvAirdrop() (DMiner/IFilDMiner.sol#124-140)
withdrawBenefits() should be declared external:
	- IFilDMiner.withdrawBenefits() (DMiner/IFilDMiner.sol#142-159)
withdrawBenefits(uint256[]) should be declared external:
	- IFilDMiner.withdrawBenefits(uint256[]) (DMiner/IFilDMiner.sol#161-175)
getBenefitPool(uint256,uint256) should be declared external:
	- IFilDMiner.getBenefitPool(uint256,uint256) (DMiner/IFilDMiner.sol#179-181)
getAndCheckRecvAirdrop(address) should be declared external:
	- IFilDMiner.getAndCheckRecvAirdrop(address) (DMiner/IFilDMiner.sol#183-186)
getUserInfo(address) should be declared external:
	- IFilDMiner.getUserInfo(address) (DMiner/IFilDMiner.sol#188-218)
getInviter(bytes32) should be declared external:
	- IFilDMiner.getInviter(bytes32) (DMiner/IFilDMiner.sol#220-222)
getNFTInfo(uint256) should be declared external:
	- IFilDMiner.getNFTInfo(uint256) (DMiner/IFilDMiner.sol#224-228)
getNFTInfos(uint256[]) should be declared external:
	- IFilDMiner.getNFTInfos(uint256[]) (DMiner/IFilDMiner.sol#230-236)
getEffectPower(uint256) should be declared external:
	- IFilDMiner.getEffectPower(uint256) (DMiner/IFilDMiner.sol#270-280)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Detectors:[93m
MasterMining.getTotalReward(uint256) (DMiner/MasterMining.sol#101-130) performs a multiplication on the result of a division:
	-halveTimes = (blockNum - startBlock - first_3_days) / halveCycle (DMiner/MasterMining.sol#116)
	-totalReward += (blockNum - startBlock - first_3_days - halveCycle * halveTimes) * currDmcPerBlock (DMiner/MasterMining.sol#124)
MasterMining.pendingDmc(uint256,address) (DMiner/MasterMining.sol#156-168) performs a multiplication on the result of a division:
	-dmcReward = getDifferBlockReward(pool.lastRewardBlock,block.number).mul(pool.allocPoint).div(totalAllocPoint) (DMiner/MasterMining.sol#163)
	-accDmcPerShare = accDmcPerShare.add(dmcReward.mul(1e12).div(lpSupply)) (DMiner/MasterMining.sol#165)
MasterMining.pendingDmcBlock(uint256,address,uint256) (DMiner/MasterMining.sol#171-183) performs a multiplication on the result of a division:
	-dmcReward = getDifferBlockReward(pool.lastRewardBlock,blockNum).mul(pool.allocPoint).div(totalAllocPoint) (DMiner/MasterMining.sol#178)
	-accDmcPerShare = accDmcPerShare.add(dmcReward.mul(1e12).div(lpSupply)) (DMiner/MasterMining.sol#180)
MasterMining.updatePool(uint256) (DMiner/MasterMining.sol#194-209) performs a multiplication on the result of a division:
	-dmcReward = getDifferBlockReward(pool.lastRewardBlock,block.number).mul(pool.allocPoint).div(totalAllocPoint) (DMiner/MasterMining.sol#204)
	-pool.accDmcPerShare = pool.accDmcPerShare.add(dmcReward.mul(1e12).div(lpSupply)) (DMiner/MasterMining.sol#207)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[93m
MasterMining.updatePool(uint256) (DMiner/MasterMining.sol#194-209) uses a dangerous strict equality:
	- lpSupply == 0 (DMiner/MasterMining.sol#200)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
Reentrancy in MasterMining.add(uint256,IERC20,bool) (DMiner/MasterMining.sol#65-82):
	External calls:
	- massUpdatePools() (DMiner/MasterMining.sol#67)
		- dmc.mint(address(this),dmcReward) (DMiner/MasterMining.sol#205)
	State variables written after the call(s):
	- poolInfo.push(PoolInfo(_lpToken,_allocPoint,lastRewardBlock,0,0,0,0)) (DMiner/MasterMining.sol#72-80)
	- totalAllocPoint = totalAllocPoint.add(_allocPoint) (DMiner/MasterMining.sol#70)
Reentrancy in MasterMining.deposit(uint256,uint256) (DMiner/MasterMining.sol#212-226):
	External calls:
	- updatePool(_pid) (DMiner/MasterMining.sol#215)
		- dmc.mint(address(this),dmcReward) (DMiner/MasterMining.sol#205)
	State variables written after the call(s):
	- pool.withdrawReward = pool.withdrawReward.add(pending) (DMiner/MasterMining.sol#218)
Reentrancy in MasterMining.deposit(uint256,uint256) (DMiner/MasterMining.sol#212-226):
	External calls:
	- updatePool(_pid) (DMiner/MasterMining.sol#215)
		- dmc.mint(address(this),dmcReward) (DMiner/MasterMining.sol#205)
	- safeDmcTransfer(msg.sender,pending) (DMiner/MasterMining.sol#219)
		- dmc.transfer(_to,dmcBal) (DMiner/MasterMining.sol#318)
		- dmc.transfer(_to,_amount) (DMiner/MasterMining.sol#320)
	- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (DMiner/MasterMining.sol#221)
	State variables written after the call(s):
	- pool.totalToken = pool.totalToken.add(_amount) (DMiner/MasterMining.sol#222)
	- user.amount = user.amount.add(_amount) (DMiner/MasterMining.sol#223)
	- user.rewardDebt = user.amount.mul(pool.accDmcPerShare).div(1e12) (DMiner/MasterMining.sol#224)
Reentrancy in MasterMining.emergencyWithdraw(uint256) (DMiner/MasterMining.sol#304-312):
	External calls:
	- pool.lpToken.safeTransfer(address(msg.sender),user.amount) (DMiner/MasterMining.sol#307)
	State variables written after the call(s):
	- pool.totalToken = pool.totalToken.sub(user.amount) (DMiner/MasterMining.sol#308)
	- user.amount = 0 (DMiner/MasterMining.sol#310)
	- user.rewardDebt = 0 (DMiner/MasterMining.sol#311)
Reentrancy in MasterMining.set(uint256,uint256,bool) (DMiner/MasterMining.sol#85-91):
	External calls:
	- massUpdatePools() (DMiner/MasterMining.sol#87)
		- dmc.mint(address(this),dmcReward) (DMiner/MasterMining.sol#205)
	State variables written after the call(s):
	- poolInfo[_pid].allocPoint = _allocPoint (DMiner/MasterMining.sol#90)
	- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (DMiner/MasterMining.sol#89)
Reentrancy in MasterMining.updatePool(uint256) (DMiner/MasterMining.sol#194-209):
	External calls:
	- dmc.mint(address(this),dmcReward) (DMiner/MasterMining.sol#205)
	State variables written after the call(s):
	- pool.totalReward = pool.totalReward.add(dmcReward) (DMiner/MasterMining.sol#206)
	- pool.accDmcPerShare = pool.accDmcPerShare.add(dmcReward.mul(1e12).div(lpSupply)) (DMiner/MasterMining.sol#207)
	- pool.lastRewardBlock = block.number (DMiner/MasterMining.sol#208)
Reentrancy in MasterMining.withdraw(uint256,uint256) (DMiner/MasterMining.sol#229-242):
	External calls:
	- updatePool(_pid) (DMiner/MasterMining.sol#233)
		- dmc.mint(address(this),dmcReward) (DMiner/MasterMining.sol#205)
	State variables written after the call(s):
	- pool.withdrawReward = pool.withdrawReward.add(pending) (DMiner/MasterMining.sol#235)
Reentrancy in MasterMining.withdraw(uint256,uint256) (DMiner/MasterMining.sol#229-242):
	External calls:
	- updatePool(_pid) (DMiner/MasterMining.sol#233)
		- dmc.mint(address(this),dmcReward) (DMiner/MasterMining.sol#205)
	- safeDmcTransfer(msg.sender,pending) (DMiner/MasterMining.sol#236)
		- dmc.transfer(_to,dmcBal) (DMiner/MasterMining.sol#318)
		- dmc.transfer(_to,_amount) (DMiner/MasterMining.sol#320)
	State variables written after the call(s):
	- pool.totalToken = pool.totalToken.sub(_amount) (DMiner/MasterMining.sol#238)
	- user.amount = user.amount.sub(_amount) (DMiner/MasterMining.sol#237)
	- user.rewardDebt = user.amount.mul(pool.accDmcPerShare).div(1e12) (DMiner/MasterMining.sol#239)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
MasterMining.safeDmcTransfer(address,uint256) (DMiner/MasterMining.sol#315-322) ignores return value by dmc.transfer(_to,dmcBal) (DMiner/MasterMining.sol#318)
MasterMining.safeDmcTransfer(address,uint256) (DMiner/MasterMining.sol#315-322) ignores return value by dmc.transfer(_to,_amount) (DMiner/MasterMining.sol#320)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
INFO:Detectors:[92m
Reentrancy in MasterMining.add(uint256,IERC20,bool) (DMiner/MasterMining.sol#65-82):
	External calls:
	- massUpdatePools() (DMiner/MasterMining.sol#67)
		- dmc.mint(address(this),dmcReward) (DMiner/MasterMining.sol#205)
	Event emitted after the call(s):
	- Add(address(_lpToken),pid,_allocPoint) (DMiner/MasterMining.sol#81)
Reentrancy in MasterMining.deposit(uint256,uint256) (DMiner/MasterMining.sol#212-226):
	External calls:
	- updatePool(_pid) (DMiner/MasterMining.sol#215)
		- dmc.mint(address(this),dmcReward) (DMiner/MasterMining.sol#205)
	- safeDmcTransfer(msg.sender,pending) (DMiner/MasterMining.sol#219)
		- dmc.transfer(_to,dmcBal) (DMiner/MasterMining.sol#318)
		- dmc.transfer(_to,_amount) (DMiner/MasterMining.sol#320)
	- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (DMiner/MasterMining.sol#221)
	Event emitted after the call(s):
	- Deposit(msg.sender,_pid,_amount) (DMiner/MasterMining.sol#225)
Reentrancy in MasterMining.emergencyWithdraw(uint256) (DMiner/MasterMining.sol#304-312):
	External calls:
	- pool.lpToken.safeTransfer(address(msg.sender),user.amount) (DMiner/MasterMining.sol#307)
	Event emitted after the call(s):
	- EmergencyWithdraw(msg.sender,_pid,user.amount) (DMiner/MasterMining.sol#309)
Reentrancy in MasterMining.withdraw(uint256,uint256) (DMiner/MasterMining.sol#229-242):
	External calls:
	- updatePool(_pid) (DMiner/MasterMining.sol#233)
		- dmc.mint(address(this),dmcReward) (DMiner/MasterMining.sol#205)
	- safeDmcTransfer(msg.sender,pending) (DMiner/MasterMining.sol#236)
		- dmc.transfer(_to,dmcBal) (DMiner/MasterMining.sol#318)
		- dmc.transfer(_to,_amount) (DMiner/MasterMining.sol#320)
	- pool.lpToken.safeTransfer(address(msg.sender),_amount) (DMiner/MasterMining.sol#240)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_pid,_amount) (DMiner/MasterMining.sol#241)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
Address.isContract(address) (DMiner/Address.sol#26-35) uses assembly
	- INLINE ASM (DMiner/Address.sol#33)
Address._verifyCallResult(bool,bytes,string) (DMiner/Address.sol#171-188) uses assembly
	- INLINE ASM (DMiner/Address.sol#180-183)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
MasterMining.initialize(IDMCToken,uint256,uint256,uint256,uint256) (DMiner/MasterMining.sol#42-57) compares to a boolean constant:
	-require(bool,string)(_initialize == false,already initialized) (DMiner/MasterMining.sol#49)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality[0m
INFO:Detectors:[92m
Different versions of Solidity is used in :
	- Version used: ['^0.6.0', '^0.6.12', '^0.6.2']
	- ^0.6.2 (DMiner/Address.sol#3)
	- ^0.6.0 (DMiner/Governance.sol#2)
	- ^0.6.0 (DMiner/IDMCToken.sol#3)
	- ^0.6.0 (DMiner/IERC20.sol#3)
	- ^0.6.0 (DMiner/IMasterMiningStorage.sol#2)
	- ^0.6.12 (DMiner/MasterMining.sol#2)
	- ^0.6.0 (DMiner/SafeERC20.sol#1)
	- ^0.6.0 (DMiner/SafeMath.sol#3)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used[0m
INFO:Detectors:[92m
Pragma version^0.6.2 (DMiner/Address.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/Governance.sol#2) allows old versions
Pragma version^0.6.0 (DMiner/IDMCToken.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/IERC20.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/IMasterMiningStorage.sol#2) allows old versions
Pragma version^0.6.12 (DMiner/MasterMining.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version^0.6.0 (DMiner/SafeERC20.sol#1) allows old versions
Pragma version^0.6.0 (DMiner/SafeMath.sol#3) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in Address.sendValue(address,uint256) (DMiner/Address.sol#53-59):
	- (success) = recipient.call{value: amount}() (DMiner/Address.sol#57)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (DMiner/Address.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
Low level call in Address.functionStaticCall(address,bytes,string) (DMiner/Address.sol#139-145):
	- (success,returndata) = target.staticcall(data) (DMiner/Address.sol#143)
Low level call in Address.functionDelegateCall(address,bytes,string) (DMiner/Address.sol#163-169):
	- (success,returndata) = target.delegatecall(data) (DMiner/Address.sol#167)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Variable Governance._governance (DMiner/Governance.sol#6) is not in mixedCase
Parameter MasterMining.initialize(IDMCToken,uint256,uint256,uint256,uint256)._dmc (DMiner/MasterMining.sol#43) is not in mixedCase
Parameter MasterMining.initialize(IDMCToken,uint256,uint256,uint256,uint256)._dmcFirst3DaysPerBlock (DMiner/MasterMining.sol#44) is not in mixedCase
Parameter MasterMining.initialize(IDMCToken,uint256,uint256,uint256,uint256)._dmcPerBlock (DMiner/MasterMining.sol#45) is not in mixedCase
Parameter MasterMining.initialize(IDMCToken,uint256,uint256,uint256,uint256)._startBlock (DMiner/MasterMining.sol#46) is not in mixedCase
Parameter MasterMining.initialize(IDMCToken,uint256,uint256,uint256,uint256)._bonusEndBlock (DMiner/MasterMining.sol#47) is not in mixedCase
Parameter MasterMining.add(uint256,IERC20,bool)._allocPoint (DMiner/MasterMining.sol#65) is not in mixedCase
Parameter MasterMining.add(uint256,IERC20,bool)._lpToken (DMiner/MasterMining.sol#65) is not in mixedCase
Parameter MasterMining.add(uint256,IERC20,bool)._withUpdate (DMiner/MasterMining.sol#65) is not in mixedCase
Parameter MasterMining.set(uint256,uint256,bool)._pid (DMiner/MasterMining.sol#85) is not in mixedCase
Parameter MasterMining.set(uint256,uint256,bool)._allocPoint (DMiner/MasterMining.sol#85) is not in mixedCase
Parameter MasterMining.set(uint256,uint256,bool)._withUpdate (DMiner/MasterMining.sol#85) is not in mixedCase
Parameter MasterMining.updateData(uint256,uint256)._dmcPerBlock (DMiner/MasterMining.sol#95) is not in mixedCase
Parameter MasterMining.updateData(uint256,uint256)._bonusEndBlock (DMiner/MasterMining.sol#95) is not in mixedCase
Parameter MasterMining.getDifferBlockReward(uint256,uint256)._from (DMiner/MasterMining.sol#150) is not in mixedCase
Parameter MasterMining.getDifferBlockReward(uint256,uint256)._to (DMiner/MasterMining.sol#150) is not in mixedCase
Parameter MasterMining.pendingDmc(uint256,address)._pid (DMiner/MasterMining.sol#156) is not in mixedCase
Parameter MasterMining.pendingDmc(uint256,address)._user (DMiner/MasterMining.sol#156) is not in mixedCase
Parameter MasterMining.pendingDmcBlock(uint256,address,uint256)._pid (DMiner/MasterMining.sol#171) is not in mixedCase
Parameter MasterMining.pendingDmcBlock(uint256,address,uint256)._user (DMiner/MasterMining.sol#171) is not in mixedCase
Parameter MasterMining.updatePool(uint256)._pid (DMiner/MasterMining.sol#194) is not in mixedCase
Parameter MasterMining.deposit(uint256,uint256)._pid (DMiner/MasterMining.sol#212) is not in mixedCase
Parameter MasterMining.deposit(uint256,uint256)._amount (DMiner/MasterMining.sol#212) is not in mixedCase
Parameter MasterMining.withdraw(uint256,uint256)._pid (DMiner/MasterMining.sol#229) is not in mixedCase
Parameter MasterMining.withdraw(uint256,uint256)._amount (DMiner/MasterMining.sol#229) is not in mixedCase
Parameter MasterMining.withdrawAll(uint256)._pid (DMiner/MasterMining.sol#245) is not in mixedCase
Parameter MasterMining.getUserInfo(uint256,address)._pid (DMiner/MasterMining.sol#251) is not in mixedCase
Parameter MasterMining.getUserInfo(uint256,address)._user (DMiner/MasterMining.sol#251) is not in mixedCase
Parameter MasterMining.getPoolInfo(uint256)._pid (DMiner/MasterMining.sol#263) is not in mixedCase
Parameter MasterMining.getUserInfoByBlockNumber(uint256,address,uint256)._pid (DMiner/MasterMining.sol#282) is not in mixedCase
Parameter MasterMining.getUserInfoByBlockNumber(uint256,address,uint256)._user (DMiner/MasterMining.sol#282) is not in mixedCase
Parameter MasterMining.getUserInfoByBlockNumber(uint256,address,uint256)._blockNum (DMiner/MasterMining.sol#282) is not in mixedCase
Parameter MasterMining.emergencyWithdraw(uint256)._pid (DMiner/MasterMining.sol#304) is not in mixedCase
Parameter MasterMining.safeDmcTransfer(address,uint256)._to (DMiner/MasterMining.sol#315) is not in mixedCase
Parameter MasterMining.safeDmcTransfer(address,uint256)._amount (DMiner/MasterMining.sol#315) is not in mixedCase
Parameter MasterMining.getPledgeAmount(address,address)._lpToken (DMiner/MasterMining.sol#325) is not in mixedCase
Parameter MasterMining.getPledgeAmount(address,address)._user (DMiner/MasterMining.sol#325) is not in mixedCase
Parameter MasterMining.sumPoolAllocPoint(uint256[])._pids (DMiner/MasterMining.sol#338) is not in mixedCase
Variable MasterMining._initialize (DMiner/MasterMining.sol#32) is not in mixedCase
Constant MasterMining.first_3_days (DMiner/MasterMining.sol#34) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformity-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
setGovernance(address) should be declared external:
	- Governance.setGovernance(address) (DMiner/Governance.sol#19-24)
initialize(IDMCToken,uint256,uint256,uint256,uint256) should be declared external:
	- MasterMining.initialize(IDMCToken,uint256,uint256,uint256,uint256) (DMiner/MasterMining.sol#42-57)
add(uint256,IERC20,bool) should be declared external:
	- MasterMining.add(uint256,IERC20,bool) (DMiner/MasterMining.sol#65-82)
set(uint256,uint256,bool) should be declared external:
	- MasterMining.set(uint256,uint256,bool) (DMiner/MasterMining.sol#85-91)
updateData(uint256,uint256) should be declared external:
	- MasterMining.updateData(uint256,uint256) (DMiner/MasterMining.sol#95-98)
getCurrentBlockReward() should be declared external:
	- MasterMining.getCurrentBlockReward() (DMiner/MasterMining.sol#134-147)
deposit(uint256,uint256) should be declared external:
	- MasterMining.deposit(uint256,uint256) (DMiner/MasterMining.sol#212-226)
withdrawAll(uint256) should be declared external:
	- MasterMining.withdrawAll(uint256) (DMiner/MasterMining.sol#245-248)
emergencyWithdraw(uint256) should be declared external:
	- MasterMining.emergencyWithdraw(uint256) (DMiner/MasterMining.sol#304-312)
getPledgeAmount(address,address) should be declared external:
	- MasterMining.getPledgeAmount(address,address) (DMiner/MasterMining.sol#325-335)
sumPoolAllocPoint(uint256[]) should be declared external:
	- MasterMining.sumPoolAllocPoint(uint256[]) (DMiner/MasterMining.sol#338-346)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Detectors:[92m
Pragma version^0.6.0 (DMiner/IDMCToken.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/IERC20.sol#3) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[93m
DMexVendor.disableVendor(uint256) (DMiner/DMexVendor.sol#77-81) performs a multiplication on the result of a division:
	-_vendors[_vendorid].disableTime = block.timestamp.div(DAYTIME).mul(DAYTIME) (DMiner/DMexVendor.sol#79)
DMexVendor._calcTotalRecv(uint256) (DMiner/DMexVendor.sol#163-180) performs a multiplication on the result of a division:
	-startLockTime = _prods[_prodid].endTime.div(DAYTIME).mul(DAYTIME) (DMiner/DMexVendor.sol#164)
DMexVendor._calcTotalRecv(uint256) (DMiner/DMexVendor.sol#163-180) performs a multiplication on the result of a division:
	-dayTime = block.timestamp.div(DAYTIME).mul(DAYTIME) (DMiner/DMexVendor.sol#165)
DMexVendor._calcTotalRecv(uint256) (DMiner/DMexVendor.sol#163-180) performs a multiplication on the result of a division:
	-diffDay = dayTime.sub(startLockTime).div(DAYTIME) (DMiner/DMexVendor.sol#174)
	-_prodTimeLocks[_prodid].totalLocks.mul(diffDay).div(_prods[_prodid].effectPeriod) (DMiner/DMexVendor.sol#178)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[93m
Reentrancy in DMexVendor.userRedemption(uint256) (DMiner/DMexVendor.sol#134-155):
	External calls:
	- returnData = usdt.functionCall(abi.encodeWithSelector(ERC20_TRANSFER_SELECTOR,msg.sender,userRedemptionAmount),DMexVendor: ERC20 transfer call failed) (DMiner/DMexVendor.sol#143-147)
	State variables written after the call(s):
	- _userRedemptions[_prodid][msg.sender] = true (DMiner/DMexVendor.sol#153)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[92m
Vistor.setVistor(address,bool).allow (DMiner/Vistor.sol#17) shadows:
	- Vistor.allow(address) (DMiner/Vistor.sol#22-24) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
Reentrancy in DMexVendor.userRedemption(uint256) (DMiner/DMexVendor.sol#134-155):
	External calls:
	- returnData = usdt.functionCall(abi.encodeWithSelector(ERC20_TRANSFER_SELECTOR,msg.sender,userRedemptionAmount),DMexVendor: ERC20 transfer call failed) (DMiner/DMexVendor.sol#143-147)
	Event emitted after the call(s):
	- UserRedemption(msg.sender,_prodid,userRedemptionAmount) (DMiner/DMexVendor.sol#154)
Reentrancy in DMexVendor.withdraw(uint256) (DMiner/DMexVendor.sol#113-132):
	External calls:
	- returnData = usdt.functionCall(abi.encodeWithSelector(ERC20_TRANSFER_SELECTOR,msg.sender,ugains),DMexVendor: ERC20 transfer call failed) (DMiner/DMexVendor.sol#120-124)
	Event emitted after the call(s):
	- VendorWithdraw(msg.sender,_prodid,ugains) (DMiner/DMexVendor.sol#130)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
DMexVendor.addProduct(bytes) (DMiner/DMexVendor.sol#41-51) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_product.endTime > block.timestamp,Must be greater than current time) (DMiner/DMexVendor.sol#45)
DMexVendor.addCapacity(uint256,uint256) (DMiner/DMexVendor.sol#96-101) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= _prods[_prodid].endTime,Sale time has ended) (DMiner/DMexVendor.sol#97)
DMexVendor.settlementAndTimeLock(uint256,address,uint256,uint256) (DMiner/DMexVendor.sol#103-111) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= _prods[_prodid].endTime,Sale time has ended) (DMiner/DMexVendor.sol#106)
DMexVendor.withdraw(uint256) (DMiner/DMexVendor.sol#113-132) uses timestamp for comparisons
	Dangerous comparisons:
	- totalAmount > _prodTimeLocks[_prodid].totalGains (DMiner/DMexVendor.sol#116)
	- returnData.length > 0 (DMiner/DMexVendor.sol#126)
	- require(bool,string)(abi.decode(returnData,(bool)),DMexVendor: ERC20 transfer did not succeed) (DMiner/DMexVendor.sol#127)
DMexVendor.userRedemption(uint256) (DMiner/DMexVendor.sol#134-155) uses timestamp for comparisons
	Dangerous comparisons:
	- returnData.length > 0 (DMiner/DMexVendor.sol#149)
	- require(bool,string)(abi.decode(returnData,(bool)),DMexVendor: ERC20 transfer did not succeed) (DMiner/DMexVendor.sol#150)
DMexVendor._calcTotalRecv(uint256) (DMiner/DMexVendor.sol#163-180) uses timestamp for comparisons
	Dangerous comparisons:
	- _vendor.state == VendorState.DISABLED && dayTime > _vendor.disableTime (DMiner/DMexVendor.sol#167)
	- dayTime <= startLockTime (DMiner/DMexVendor.sol#171)
	- diffDay > _prods[_prodid].effectPeriod (DMiner/DMexVendor.sol#175)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Address.isContract(address) (DMiner/Address.sol#26-35) uses assembly
	- INLINE ASM (DMiner/Address.sol#33)
Address._verifyCallResult(bool,bytes,string) (DMiner/Address.sol#171-188) uses assembly
	- INLINE ASM (DMiner/Address.sol#180-183)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
DMexVendor.initialize() (DMiner/DMexVendor.sol#28-32) compares to a boolean constant:
	-require(bool,string)(_initialize == false,already initialized) (DMiner/DMexVendor.sol#29)
DMexVendor.userRedemption(uint256) (DMiner/DMexVendor.sol#134-155) compares to a boolean constant:
	-require(bool,string)(_userRedemptions[_prodid][msg.sender] == false,you has been redemptioned) (DMiner/DMexVendor.sol#139)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality[0m
INFO:Detectors:[92m
Different versions of Solidity is used in :
	- Version used: ['^0.6.0', '^0.6.2']
	- ^0.6.2 (DMiner/Address.sol#3)
	- ^0.6.0 (DMiner/DMexVendor.sol#2)
	- ABIEncoderV2 (DMiner/DMexVendor.sol#3)
	- ^0.6.0 (DMiner/Governance.sol#2)
	- ^0.6.0 (DMiner/IDMexVendor.sol#2)
	- ABIEncoderV2 (DMiner/IDMexVendor.sol#3)
	- ^0.6.0 (DMiner/IDMexVendorStorage.sol#2)
	- ^0.6.0 (DMiner/SafeMath.sol#3)
	- ^0.6.0 (DMiner/Vistor.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used[0m
INFO:Detectors:[92m
Pragma version^0.6.2 (DMiner/Address.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/DMexVendor.sol#2) allows old versions
Pragma version^0.6.0 (DMiner/Governance.sol#2) allows old versions
Pragma version^0.6.0 (DMiner/IDMexVendor.sol#2) allows old versions
Pragma version^0.6.0 (DMiner/IDMexVendorStorage.sol#2) allows old versions
Pragma version^0.6.0 (DMiner/SafeMath.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/Vistor.sol#2) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in Address.sendValue(address,uint256) (DMiner/Address.sol#53-59):
	- (success) = recipient.call{value: amount}() (DMiner/Address.sol#57)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (DMiner/Address.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
Low level call in Address.functionStaticCall(address,bytes,string) (DMiner/Address.sol#139-145):
	- (success,returndata) = target.staticcall(data) (DMiner/Address.sol#143)
Low level call in Address.functionDelegateCall(address,bytes,string) (DMiner/Address.sol#163-169):
	- (success,returndata) = target.delegatecall(data) (DMiner/Address.sol#167)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Parameter DMexVendor.addVendor(bytes)._vendorData (DMiner/DMexVendor.sol#34) is not in mixedCase
Parameter DMexVendor.addProduct(bytes)._prodData (DMiner/DMexVendor.sol#41) is not in mixedCase
Parameter DMexVendor.updateProduct(uint256,bytes)._prodid (DMiner/DMexVendor.sol#53) is not in mixedCase
Parameter DMexVendor.updateProduct(uint256,bytes)._prodData (DMiner/DMexVendor.sol#53) is not in mixedCase
Parameter DMexVendor.transferVendorAdmin(uint256,address)._vendorid (DMiner/DMexVendor.sol#62) is not in mixedCase
Parameter DMexVendor.transferVendorAdmin(uint256,address)._to (DMiner/DMexVendor.sol#62) is not in mixedCase
Parameter DMexVendor.transferProdRevenueReceiver(uint256,address)._prodid (DMiner/DMexVendor.sol#69) is not in mixedCase
Parameter DMexVendor.transferProdRevenueReceiver(uint256,address)._to (DMiner/DMexVendor.sol#69) is not in mixedCase
Parameter DMexVendor.disableVendor(uint256)._vendorid (DMiner/DMexVendor.sol#77) is not in mixedCase
Parameter DMexVendor.getVendor(uint256)._vendorid (DMiner/DMexVendor.sol#83) is not in mixedCase
Parameter DMexVendor.getProduct(uint256)._prodid (DMiner/DMexVendor.sol#87) is not in mixedCase
Parameter DMexVendor.initVendor(uint256)._vendorid (DMiner/DMexVendor.sol#91) is not in mixedCase
Parameter DMexVendor.addCapacity(uint256,uint256)._prodid (DMiner/DMexVendor.sol#96) is not in mixedCase
Parameter DMexVendor.settlementAndTimeLock(uint256,address,uint256,uint256)._prodid (DMiner/DMexVendor.sol#103) is not in mixedCase
Parameter DMexVendor.settlementAndTimeLock(uint256,address,uint256,uint256)._power (DMiner/DMexVendor.sol#103) is not in mixedCase
Parameter DMexVendor.settlementAndTimeLock(uint256,address,uint256,uint256)._amount (DMiner/DMexVendor.sol#103) is not in mixedCase
Parameter DMexVendor.withdraw(uint256)._prodid (DMiner/DMexVendor.sol#113) is not in mixedCase
Parameter DMexVendor.userRedemption(uint256)._prodid (DMiner/DMexVendor.sol#134) is not in mixedCase
Parameter DMexVendor.available(uint256)._prodid (DMiner/DMexVendor.sol#158) is not in mixedCase
Variable DMexVendor._vendors (DMiner/DMexVendor.sol#15) is not in mixedCase
Variable DMexVendor._prods (DMiner/DMexVendor.sol#16) is not in mixedCase
Variable DMexVendor._prodTimeLocks (DMiner/DMexVendor.sol#17) is not in mixedCase
Variable DMexVendor._userRedemptions (DMiner/DMexVendor.sol#18) is not in mixedCase
Constant DMexVendor.usdt (DMiner/DMexVendor.sol#21) is not in UPPER_CASE_WITH_UNDERSCORES
Variable DMexVendor._globalVendorid (DMiner/DMexVendor.sol#24) is not in mixedCase
Variable DMexVendor._globalProdid (DMiner/DMexVendor.sol#25) is not in mixedCase
Variable DMexVendor._initialize (DMiner/DMexVendor.sol#26) is not in mixedCase
Variable Governance._governance (DMiner/Governance.sol#6) is not in mixedCase
Parameter Vistor.setVistor(address,bool)._addr (DMiner/Vistor.sol#17) is not in mixedCase
Parameter Vistor.allow(address)._addr (DMiner/Vistor.sol#22) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformity-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
initialize() should be declared external:
	- DMexVendor.initialize() (DMiner/DMexVendor.sol#28-32)
addCapacity(uint256,uint256) should be declared external:
	- DMexVendor.addCapacity(uint256,uint256) (DMiner/DMexVendor.sol#96-101)
setGovernance(address) should be declared external:
	- Governance.setGovernance(address) (DMiner/Governance.sol#19-24)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Detectors:[92m
Pragma version^0.6.0 (DMiner/IDMEXToken.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/IERC20.sol#3) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Address.isContract(address) (DMiner/Address.sol#26-35) uses assembly
	- INLINE ASM (DMiner/Address.sol#33)
Address._verifyCallResult(bool,bytes,string) (DMiner/Address.sol#171-188) uses assembly
	- INLINE ASM (DMiner/Address.sol#180-183)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Different versions of Solidity is used in :
	- Version used: ['^0.6.0', '^0.6.2']
	- ^0.6.2 (DMiner/Address.sol#3)
	- ^0.6.0 (DMiner/IERC20.sol#3)
	- ^0.6.0 (DMiner/SafeERC20.sol#1)
	- ^0.6.0 (DMiner/SafeMath.sol#3)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used[0m
INFO:Detectors:[92m
Pragma version^0.6.2 (DMiner/Address.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/IERC20.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/SafeERC20.sol#1) allows old versions
Pragma version^0.6.0 (DMiner/SafeMath.sol#3) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in Address.sendValue(address,uint256) (DMiner/Address.sol#53-59):
	- (success) = recipient.call{value: amount}() (DMiner/Address.sol#57)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (DMiner/Address.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
Low level call in Address.functionStaticCall(address,bytes,string) (DMiner/Address.sol#139-145):
	- (success,returndata) = target.staticcall(data) (DMiner/Address.sol#143)
Low level call in Address.functionDelegateCall(address,bytes,string) (DMiner/Address.sol#163-169):
	- (success,returndata) = target.delegatecall(data) (DMiner/Address.sol#167)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Pragma version^0.6.0 (DMiner/IDMexVendorStorage.sol#2) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Pragma version^0.6.0 (DMiner/SafeMath.sol#3) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Address.isContract(address) (DMiner/Address.sol#26-35) uses assembly
	- INLINE ASM (DMiner/Address.sol#33)
Address._verifyCallResult(bool,bytes,string) (DMiner/Address.sol#171-188) uses assembly
	- INLINE ASM (DMiner/Address.sol#180-183)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Pragma version^0.6.2 (DMiner/Address.sol#3) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in Address.sendValue(address,uint256) (DMiner/Address.sol#53-59):
	- (success) = recipient.call{value: amount}() (DMiner/Address.sol#57)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (DMiner/Address.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (DMiner/Address.sol#119)
Low level call in Address.functionStaticCall(address,bytes,string) (DMiner/Address.sol#139-145):
	- (success,returndata) = target.staticcall(data) (DMiner/Address.sol#143)
Low level call in Address.functionDelegateCall(address,bytes,string) (DMiner/Address.sol#163-169):
	- (success,returndata) = target.delegatecall(data) (DMiner/Address.sol#167)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Pragma version^0.6.0 (DMiner/Governance.sol#2) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Variable Governance._governance (DMiner/Governance.sol#6) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformity-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
setGovernance(address) should be declared external:
	- Governance.setGovernance(address) (DMiner/Governance.sol#19-24)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Detectors:[92m
Pragma version^0.6.2 (DMiner/IERC721.sol#3) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Pragma version^0.6.2 (DMiner/ICloudMiner.sol#3) allows old versions
Pragma version^0.6.2 (DMiner/IERC721.sol#3) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Pragma version^0.6.0 (DMiner/IDMexVendor.sol#2) allows old versions
Pragma version^0.6.0 (DMiner/IDMexVendorStorage.sol#2) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Vistor.setVistor(address,bool).allow (DMiner/Vistor.sol#17) shadows:
	- Vistor.allow(address) (DMiner/Vistor.sol#22-24) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
DMexAirdrop0.recvAirdrop(address) (DMiner/DMexAirdrop0.sol#35-45) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(endTime >= block.timestamp && _userPowers[user] > 0,can't recv airdrop) (DMiner/DMexAirdrop0.sol#36)
DMexAirdrop0.checkAirdrop(address) (DMiner/DMexAirdrop0.sol#51-60) uses timestamp for comparisons
	Dangerous comparisons:
	- (endTime > block.timestamp,_userRecv[user],_power) (DMiner/DMexAirdrop0.sol#59)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
DMexAirdrop0.recvAirdrop(address) (DMiner/DMexAirdrop0.sol#35-45) compares to a boolean constant:
	-require(bool,string)(_userRecv[user] == false,already recv airdrop) (DMiner/DMexAirdrop0.sol#37)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality[0m
INFO:Detectors:[92m
Pragma version^0.6.0 (DMiner/DMexAirdrop0.sol#2) allows old versions
Pragma version^0.6.0 (DMiner/Governance.sol#2) allows old versions
Pragma version^0.6.0 (DMiner/IDMexAirdrop.sol#2) allows old versions
Pragma version^0.6.0 (DMiner/Vistor.sol#2) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Parameter DMexAirdrop0.addAirdrop(uint256,address[])._users (DMiner/DMexAirdrop0.sol#22) is not in mixedCase
Variable DMexAirdrop0._userRecv (DMiner/DMexAirdrop0.sol#14) is not in mixedCase
Variable DMexAirdrop0._userPowers (DMiner/DMexAirdrop0.sol#15) is not in mixedCase
Variable Governance._governance (DMiner/Governance.sol#6) is not in mixedCase
Parameter Vistor.setVistor(address,bool)._addr (DMiner/Vistor.sol#17) is not in mixedCase
Parameter Vistor.allow(address)._addr (DMiner/Vistor.sol#22) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformity-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
setGovernance(address) should be declared external:
	- Governance.setGovernance(address) (DMiner/Governance.sol#19-24)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Detectors:[92m
Pragma version^0.6.0 (DMiner/IDMexAirdrop.sol#2) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Pragma version^0.6.0 (DMiner/IDMCToken.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/IERC20.sol#3) allows old versions
Pragma version^0.6.0 (DMiner/IMasterMiningStorage.sol#2) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Vistor.setVistor(address,bool).allow (DMiner/Vistor.sol#17) shadows:
	- Vistor.allow(address) (DMiner/Vistor.sol#22-24) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
Pragma version^0.6.0 (DMiner/Governance.sol#2) allows old versions
Pragma version^0.6.0 (DMiner/Vistor.sol#2) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Variable Governance._governance (DMiner/Governance.sol#6) is not in mixedCase
Parameter Vistor.setVistor(address,bool)._addr (DMiner/Vistor.sol#17) is not in mixedCase
Parameter Vistor.allow(address)._addr (DMiner/Vistor.sol#22) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformity-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
setGovernance(address) should be declared external:
	- Governance.setGovernance(address) (DMiner/Governance.sol#19-24)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:DMiner analyzed (55 contracts with 46 detectors), 329 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m
